body {
  /*font: 14px Tahoma
  color: #00065B;*/
  width: 1200px; /*Ширина сайт*/
  margin: 0 auto; /*отцентровка*/
  padding: 10px; /*Отступ от внутренних границ рамки*/
  background-color:#f6f6f6; /*Цвет фона страницы*/
  background-image: url(./Img/pattern.png); /*Фоновый рисунок*/
 /*background-repeat:repeat; - фоновое изображение повторяется.очень полезное свойство. ЮЗАЙ ПОСТОЯННО. repeat | repeat-x | repeat-y | no-repeat */
 /*background-position:right bottom; - расположение фонового изображения.% | left | right | top | bottom | px*/
}

.main-header ul {
  margin: 0;
  padding: 0;
  list-style: none; /*убираем маркеры*/
 }

 .main-header li { /*Горизонтальное меню*/
  display: inline-block; /* делаем элементы списка строчными*/
  margin-right: 0px; /*отступ между элементами*/
  white-space: nowrap; /*запрет переноса строки внутри пунктов меню. ДЕЛАЕТ ВЫПАДАЮЩЕЕ МЕНЮ ГОРИЗОНТАЛЬНЫМ*/
}

.main-header a {
  display: block;
  margin-left: -1px; /*убирает двойную рамку между соседними элементами*/
  padding: 15px 15px;
  color: #0088cc;
  background-color: #f5f5f5;
  border-left: 1px solid #e5e5e5;
}

.main-header a:hover {
  background:  #cc3333;
  color: white;
}

.main-header > li {
  position: relative;
}

.main-header .sub-menu { /* Подменю */
  position: absolute;
  margin: 0;
  padding:0;
  list-style: none;
  background: #fcf8e3;
  display: none;
}

.main-header > li:hover .sub-menu {
  display: block;
}

.content { /*Класс*/
  float: right; /*ВЫРАВНИВАНИЕ ПО ПРАВОЙ СТОРОНЕ*/
  width: 80%;
}

.definition {
  color: #DC143C;
  font-weight:bold;
}

.example { /*ПРИМЕР*/
  border-width:1px; /*Толщина рамки*/
  border-style:solid; /*Стиль рамки. Dotted | Dashed | Double | Groove | Ridge | Inset | Outset*/
  border-color:#A9A9A9; /*Цвет рамки*/
  border-radius: 3px; /*Закругление рамки*/
  padding: 10px;
  background-color:#DEDEDE; /*Цвет фона*/
}

.menu {
  float: left; /*ВЫРАВНИВАНИЕ ПО ЛЕВОЙ СТОРОНЕ*/
  width: 280px;
  position:fixed; /*ЗАКРЕПЛЕНИЕ МЕНЮ НА ЭКРАНЕ*/
  left: 300px; /*ПОИЗИЦИОНИРОВАНИЕ МЕНЮ*/
  font-size: 15px;
  font-weight:bold;
}

.menu a {
  text-decoration: none; /*убираем подчеркивание у ссылок*/
  border: 1px solid #e5e5e5;
  margin-bottom: -1px;
  padding: 3px 3px;
  display: block;
}

.menu ul {
  list-style: none; /*убираем маркеры*/
  margin: 0;
  padding: 10px 15px;
  line-height: 1,2; /*межстрочный интервал*/
}

p, h4, #myList {
  color: #404040; /*ЦВЕТ ТЕКСТА*/
}

p {
  font-family:Verdana, Tahoma, "Courier New", sans-serif; /*Шрифт*/
  font-size:14px; /*Размер шрифта*/
  line-height:1.5; /*Межстрочный интервал. Можно в px | em | pt | %*/
  word-spacing:3px; /*Интервал между словами*/
}

#BE { /*Заголовок "Блочные элементы"*/
  text-transform:uppercase; /* РЕГИСТР. Делает текст заглавными буквами. uppercase | lowercase | capitalize*/
  border-width:2px; /*Толщина рамки*/
  border-style:solid; /*Стиль рамки. Dotted | Dashed | Double | Groove | Ridge | Inset | Outset*/
  border-color:#000000; /*Цвет рамки*/
  border-radius: 10px; /*Закругление рамки*/
  box-shadow: 3px 3px 7px #000000; /*Тень*/
  padding: 0 10px 0; /*внутренние отступы в рамке*/
}

#sections {
  color: #FF0000;
  text-align: center; /*ВЫРАВНИВАНИЕ*/
  letter-spacing: 1px; /*Расстояние между буквами*/
  background-color: #cc0000; /*Цвет фона заголовка*/
  color: #ffffff;
  opacity: 0.5; /*Прозрачность*/
}

#sections:hover { /*Изменение при наведении*/
  opacity: 1;
}

.new {
  color: #6be5c3;
}

.ul1 li { /*селектор потомков*/
  color: #cc0000;
}

/*a { - Статичный цвет ссылки при всех действиях
  color: #111111;
}*/

a:link { /*Цвет не нажатой ссылки*/
  color: #111111;
}

a:visited { /*Посещенная ссылка*/
  color: #FAA21A;
}

.menu a:hover { /*СОБЫТИЙНЫЙ СЕЛЕКТОР. Цвет ссылки при наведении на нее курсора*/
  color: #800000;
  background: #cc3333;
  color: #ffffff;
  opacity: 0.5; /*Прозрачность*/
}

a:active { /*Цвет ссылки в момент клика*/
  color: #008000:;
}

.kyrsiv {
  font-style: italic; /*КУРСИВ*/
}

.zhirni {
  font-weight:bold; /*ЖИРНЫЙ*/
}

.pod4 {
  text-decoration: underline; /*ПОДЧЕРКИВАНИЕ*/
}

.nad4 {
  text-decoration: overline; /*ЧЕРТА СВЕРХУ*/
}

.pere4 {
  text-decoration: line-through; /*ЗАЧЕРКИВАНИЕ*/
}

.bezpod4 {
  text-decoration: none; /*УБИРАЕТ ВСЕ ЭФФЕКТЫ.*/
}

.virleft {
  text-align: left;
}

.vircenter {
  text-align: center;
}

.virright {
  text-align: right;
}

.virjustify {
  text-align: justify;
}

.ks { /*красная строка*/
  text-indent: 20px; /*margin-left: 20px;*/
}

.font {
  color: #404040;
  font: italic bold 14px Verdana; /*font-style | font-weight | font-size | font-family*/
}

.ul { /*Стили маркеров списка*/
  list-style: none url(/img/Gal.jpeg)
}

 #d1 {
  width: 700px;
  height: 421px;
  margin: 10px auto;
  outline: 1px solid #FAA21A;
 background-image: url(../Img/gc.jpg);
 }

 .mh1 {
  text-align: center;
  padding-top: 200px;
  color:#CEE9F8;
  font: 36px Verdana
  }

table, td, th {
  border: 1px solid #cccccc; /*КОРОТКАЯ ЗАПИСЬ ОПИСАНИЯ ПАРАМТЕРОВ РАМКИ*/
  text-align: center;
  border-collapse: collapse;
}

table {
  width: 600px;
  margin: 0 auto;
  /*border-collapse: collapse; УБИРАЕТ ДВОЙНЫЕ РАМКИ */
}

td, th {
  height: 50px;
  padding: 5px;
}

th {
  background-color: #FEFECC; /*ЦВЕТ ФОНА*/
}

form input:focus { /*ПСЕВДОКЛАСС ФОКУС. выделяет элемент, который в фокусе*/
  border-color: #0088cc;
}

input[type="submit"] { /*ЦВЕТ РАМКИ У КНОПКИ*/
  border-color: green;
}

.social-networks { /*Соцсети*/
  width: 270px;
  margin: 0 auto;
  margin-top: 120px;
  padding: 10px;
  padding-left: 20px;
  background: #ecf0f1;
}

.social-networks b {
  margin-right: 15px;
  font-weight: normal;
  text-transform: uppercase;
  color: #7f8c8d;
}

.social {
  display: inline-block;
  width: 40px;
  height: 40px;
  margin-right: 10px;
  background: #bdc3c7 url("../img/social.png") no-repeat;
  vertical-align: middle;
}

.social-vk {
  background-color: #6d8fb3;
  background-position: 0px -120px;
}

.social-fb {
  background-color: #526da3;
  background-position: 0px -60px;;
}

.social-tw {
  background-color: #73bfe6;
  background-position: 0px 0px;;
}

.paginator { /*ПЕРЕКЛЮЧАТЕЛЬ СТРАНИЦ*/
  text-align: center;
}

.paginator a, .paginator span {
  display: inline-block;
  min-width: 20px;
  height: 40px;
  padding: 0 10px;
  line-height: 40px;
  text-align: center;
  vertical-align: middle;
  font-weight: bold;
  text-decoration: none;
  color: white;
  background: #95a5a6;
}

.paginator-arrows {
  width: 280px;
  margin: 30px auto;
  padding: 10px;
  white-space: nowrap;
  background: #ecf0f1;
}

.paginator-arrows a, .paginator-arrows span {
  display: inline-block;
  min-width: 20px;
  height: 40px;
  padding: 0 10px;
  line-height: 40px;
  text-align: center;
  vertical-align: middle;
  font-weight: bold;
  text-decoration: none;
  color: white;
  background: #95a5a6;
}

.paginator-arrows .prev {
  margin-right: 20px;
  text-indent: -1000px;
  background-image: url("../img/arrows.png");
  background-repeat: no-repeat;
  background-position: 0 0;
}

.paginator-arrows .next {
  margin-left: 20px;
  text-indent: -1000px;
  background-image: url("../img/arrows.png");
  background-position: 0 -40px;
  background-repeat: no-repeat;
}

.paginator-arrows .current { /*Выделение цветом текущей страницы*/
  background-color: #16a085;
}

.paginator-arrows .disabled { /*инактив кнопки "Назад", когда мы на 1 странице*/
  opacity: 0.3;
}

 .paginator a:hover { /*Изменение цвета кнопки страницы при наведении*/
  background-color: #2ecc71;
}

.contacts { /*КОНТАКТЫ*/
  width: 250px;
  margin: 0 auto;
  margin-top :80px;
}

.contacts .title {
  margin-bottom: 20px;
  font-size: 20px;
  font-weight: bold;
  color: #7f8c8c;
}

.contacts .item {
  position: relative;
  margin-bottom: 10px;
  padding-left: 30px;
}

.contacts .icon {
  position: absolute;
  top: 3px;
  left: 0px;
  width: 22px;
  height: 32px;
  outline: 2px solid rgba(0, 0, 0, 0.1);
  background: url("../img/contacts.png") no-repeat 0 0;
}

.contacts .icon-location {
  background-position: 0 0;
}

.contacts .icon-phone {
  background-position: -30px 0;
}

.contacts .icon-email {
  background-position: -60px 0;
}

.comment { /*КОММЕНТАРИИ*/
  position: relative;
  margin-left: 50px;
  margin-top: 90px;
  margin-right: 20px;
}

.comment-avatar {
  position: absolute;
  top: 0;
  left: -40px;
  width: 70px;
  height: 70px;
  background: #7f8c8c url("../img/avatar.png") no-repeat 50% 50%;
}

.comment-author {
  padding-left: 45px;
  margin-bottom: 5px;
  font-size: 16px;
  font-weight: bold;
}

.comment-text {
  padding: 12px;
  padding-left: 45px;
  background: #f8f8f8;
  border-bottom: 5px solid #e5e6e6;
}

.comment-date {
  margin-top: 5px;
  font-size: 12px;
  color: #bdc3c7;
}

.page-footer {
  clear: both;
}

.comment-reply { /*Кнопка ОТВЕТ НА КОМЕНТАРИЙ*/
  position: absolute;
  top: 0;
  right: 0;
  width: 15px;
  height: 15px;
  outline: 2px solid rgba(255, 0, 0, 0.1);
  background: url("../img/reply.png") no-repeat 0 0;



/* tr {
  border-bottom: 2px solid lightgray; - ОТОБРАЖАЕТ ТОЛЬКО НИЖНИЕ РАМКИ ТАБЛИЦЫ
  vertical-align: middle; - ВЫРАВНИВАНИЕ ТЕКСТА В ЯЧЕЙКЕ ПО ВЕРТИКАЛЕ | top | middle | bottom | baseline | sub | super
  text-align: center; - ВЫРАВНИВАНИЕ ТЕКСТА В ЯЧЕЙКЕ ПО ГОРИЗОНТАЛЕ
  padding:; 20px; - ОТСТУП СО ВСЕХ СТОРОН
  width: 50%; -  ШИРИНА СТРОКИ
  margin-bottom: 20px; - ОТСТУП ВНИЗ
  clear: both; - ОТМЕНЯЕТ ОБТЕКАНИЕ ЭЛЕМЕНТА С ЛЕВОГО И ПРАВОГО КРАЯ
  inherit - ПРИНУДИТЕЛЬНОЕ НАСЛЕДОВАНИЕ ОТ РОДИТЕЛЬСКОГО ЭЛЕМЕНТА
  } */

/*СПРАЙТЫ
Спрайт — это одно большое изображение, в котором содержится много маленьких, как бы карта изображений. Вот живой пример (эта же картинка выведена на тёмном фоне внизу мини-браузера), который мы будем использовать в задании.
Спрайты используются, чтобы снизить количество запросов на сервер. Каждая маленькая картинка — это отдельный запрос, а чем меньше запросов, тем лучше. Поэтому маленькие картинки «склеивают» в одну большую.
Части спрайта отображают в элементах с небольшими размерами. Такому элементу задают картинку-спрайт в качестве фона и смещают её таким образом, чтобы была видна нужная её часть.
В спрайты обычно объединяют иконки и различные мелкие декоративные изображения. Кстати, есть сервисы для быстрого создания спрайтов и генерации CSS-кода для них, например, SpritePad.
*/

/*КОНТЕКСТНЫЕ СЕЛЕКТОРЫ
Селектор может состоять из нескольких частей, разделённых пробелом

.shooter-1 .first, .third, .fourth {
    background-color: white;
}

.shooter-1 .second, .shooter-1 .fifth {
    background-color: red;
    }

.shooter-2 .first {
    background-color: red;
}

.shooter-2 .second, .third, .fourth, .fifth {
    background-color: white;
}
*/

/* ВЫПАДАЮЩЕЕ МЕНЮ
li.top ul.submenu {
  display: none;
}

li.top:hover ul.submenu {
  display: block;
}

em {
    display: none;
}

tr:hover em {
    display: inline;
}

tr:hover strong {
    color: #0088cc;
}
*/

/* ДИНАМИЧНАЯ ССЫЛКА

a {
text-decoration: none;
color: #0088CC;
border-bottom: 1px dashed #0088CC;
}

a:hover {
    border-bottom: none;
}
*/

/*white-space - УПРАВЛЕНИЕ ПРОБЕЛАМИ
nowrap — отображает весь текст одной строкой без переносов;
pre — сохраняет пробелы и переносы как в исходном коде аналогично тегу <pre>;
pre-wrap — работает как значение pre, но добавляет автоматические переносы, если текст не помещается в контейнер;
normal — режим по умолчанию.
*/

/* background-position
Когда фоновое изображение больше блока, то оно обрезается. Управлять тем, какую часть изображения будет видно, также можно с помощью свойства background-position.
Иногда для этого удобно использовать относительные значения (проценты), а иногда абсолютные (пиксели).
Кстати, можно использовать не только положительные, но и отрицательные значения. А также комбинировать пиксели и проценты.
Пример:
background-position:35px 25px;
background-position:-95px 25px;
background-position:-45px 50%;
background-position:100% 50%;
*/

/*background-attachment
Обычно фоновое изображение прокручивается вместе с содержимым блока. Это хорошо видно в мини-браузере. Прокрутите окно вниз и увидите, что фон поднимется наверх.
С помощью свойства background-attachment можно зафиксировать фон на месте и он не будет перемещаться при прокручивании.
Значение свойства:
scroll — фон прокручивается вместе с содержимым. Это значение по умолчанию.
fixed — фон не прокручивается, зафиксирован на одном месте.
Это тот случай, когда легче показать, чем объяснять: выполняйте задание и смотрите, как изменяется поведение фона при прокрутке.
*/

/*background
Фон элемента можно задавать с помощью отдельных свойств: background-color, background-image и т.д. Получается довольно громоздкая запись.
Также задать фон можно с помощью сокращенного свойства background, в котором через пробел перечисляются его компоненты:
background: [bc] [bi] [br] [bp] [ba];
Обозначения:
[bc] — background-color
[bi] — background-image
[br] — background-repeat
[bp] — background-position
[ba] — background-attachment
Если какой-то компонент не указан, то берется значение по умолчанию. Ниже примеры.
background: #e74c3c;
background: url("img.png") no-repeat;
background: url("img.png") 10px 20px;
В первом примере просто задан цвет фона.
Во втором примере задано не повторяющееся фоновое изображение, а также по умолчанию прозрачный цвет фона, расположение в левом верхнем углу.
В третьем примере задано фоновое изображение и его расположение, а также по умолчанию прозрачный цвет фона и режим повторения во все стороны.
*/





/*background-size
По умолчанию браузер не меняет размеры фонового изображения. Как быть, если нужно задать фону другие ширину и высоту или привязать его размеры к размерам родительского блока?

Для этого существует свойство background-size. Оно принимает в качестве значения два аргумента: первый — это ширина фонового изображения, второй — его высота. Второй аргумент необязательный. Если высота не указывается, то она определяется автоматически в зависимости от ширины и исходных пропорций. По умолчанию оба аргумента равны auto.

Пример:

background-size: auto auto;   /* исходные ширина и высота изображения */
/*background-size: 100px;       /* ширина 100px, высота пропорциональная */
/*background-size: 100px 200px; /* ширина 100px, высота 200px */

/*Ещё два значения свойства background-size — это contain и cover.

Значение contain работает так:

пропорции изображения сохраняются;
изображению задаются максимально возможные размеры, при которых оно и по ширине, и по высоте полностью помещается в границы фона;
изображение может не закрывать всю фоновую область блока, если пропорции изображения и блока разные.
Значение cover работает иначе:

пропорции изображения сохраняются;
изображению задаются минимально возможные размеры, при которых оно закроет всю фоновую область блока;
если пропорции изображения и блока разные, то часть изображения обрезается.*/



/*background-origin
Ещё одно фоновое свойство — background-origin. Оно задаёт расположение и размеры области отображения фонового изображения и принимает три значения: padding-box, border-box и content-box.
Значение по умолчанию — padding-box. При этом значении область отображения фонового изображения соответствует внутренней области блока, не включая рамки.

При content-box область отображения соответствует только области содержимого, не включая рамки и внутренние отступы.

При border-box область отображения соответствует полному размеру блока, включая и рамки. Фоновое изображение начинается от внешнего края блока и закрывается рамками, если они заданы.
*/


/*background-clip
Свойство background-clip управляет тем, как обрезается фон. Причём обрезаются не только фоновые изображения, но и фоновый цвет.

Значения свойства такие же, как у background-origin: padding-box, border-box и content-box.
Значение border-box задано по умолчанию, при этом фоновое изображение совсем не обрезается.

Значение padding-box обрежет фон по внутреннему краю области рамки.

Значение content-box обрежет фон по краю области содержимого.
*/

/*Множественный фон
Можно задать блоку несколько фоновых изображений одновременно. Для этого пути к изображениям в свойстве background-image или background перечисляются через запятую:

background-image: url("image-1.png"), url("image-2.png");
При этом выше будет то изображение, которое находится раньше в списке: image-1.png в примере будет выше image-2.png.

Значения других свойств для множественных фоновых изображений тоже задаются через запятую. Порядок значений должен соответстовать порядку фоновых картинок. Например:

/* для первой картинки масштабирование contain, для второй — 100px */
/*background-size: contain, 100px;

/* для первой картинки позиционирование top, для второй — 100% */
/*background-position: top, 100%;
*/



/*Повторение фона: background-repeat: round
Два интересных, но малоизвестных значения привычного свойства background-repeat, которое задаёт повторение фона, — это round и space.

Значение свойства по умолчанию background-repeat: repeat просто повторяет фоновую картинку по всей ширине и высоте блока. Если части повторяющейся картинки не помещаются в ширину блока, то они просто обрезаются.

Если задать значение background-repeat: round, то повторяющиеся картинки по краям блока обрезаться не будут, а равномерно растянутся или сожмутся по всей ширине, чтобы занять оставшееся пространство.

Кстати, background-repeat принимает в качестве значения два аргумента: режим повторения по горизонтали и по вертикали. Если передать один параметр, то он применится к обоим направлениям. Например:

/* повторение фона repeat по горизонтали и вертикали */
/*background-repeat: repeat;

/* повторение фона round по горизонтали и repeat по вертикали */
/*background-repeat: round repeat;
*/


/*Повторение фона: background-repeat: space
Режим повторения фона background-repeat: space похож на round, при нём части картинки тоже не обрезаются. Отличие в том, что повторяющиеся фоновые картинки не сжимаются или растягиваются, а для компенсации ширины блока между ними добавляется пустое пространство
*/


/*Внешняя рамка
Полезное, но редко используемое свойство — внешняя рамка или outline.

Синтаксис outline схож с border. Но внешней рамке нельзя задать параметры отдельных сторон. Пример:

/* сплошная чёрная рамка толщиной 10px */
/*outline: 10px solid black;
Это сокращённый синтаксис свойства outline. Есть и отдельные свойства:

outline-width: 10px;  /* толщина */
/*outline-style: solid; /* стиль */
/*outline-color: black; /* цвет */
/*Внешняя рамка всегда отображается снаружи элемента, не влияет на его размер и не занимает места, то есть отображается над другими элементами.

C помощью свойства outline-offset можно изменять расположение рамки. Положительное значение отодвигает рамку от внешнего края элемента, а отрицательное «втягивает» внутрь.

У outline-style те же значения, что и у border-style. Кстати, есть интересные типы рамок ridge и groove, они создают объёмные рамки.
*/



/*Скругление углов
Закруглять углы элементов можно с помощью свойства border-radius.

Свойство задаёт радиус скругления углов в пикселях или процентах. Если у блока есть рамка, то скругляется и она.
Свойство border-radius принимает от одного до четырёх аргументов.

*рис. border-radius.jpg*

Пример
border-radius: 150px;
border-radius: 150px 50px;
border-radius: 50%;

Вы можете закруглять отдельные углы с помощью свойств: border-top-left-radius, border-top-right-radius, border-bottom-right-radius и border-bottom-left-radius.

А ещё можно задавать разные горизонтальные и вертикальные радиусы скругления. Для этого нужно написать два значения через пробел в свойстве скругления угла. Первое значение задаёт радиус по горизонтали, второе — по вертикали:

*рис.border-radius-2.jpg *

/* горизонтальный радиус 30px, вертикальный 15px */
/*border-top-right-radius: 30px 15px;
Разные горизонтальные и вертикальные радиусы можно задавать и в свойстве border-radius. Для этого нужно использовать /, например:

/* горизонтальный радиус всех углов 10px, вертикальный 5px */
/*border-radius: 10px / 5px;

/* разные горизонтальные и вертикальные радиусы у каждого угла */
/*border-radius: 10px 20px 30px 40px / 5px 15px 25px 35px;
*/



/*Изображение рамки: border-image-source

Мы подошли к обширной и интересной теме, в которой рамки и фоновые изображения встречаются.

Итак, семейство свойств border-image задаёт фоновое изображение для рамки блока. Поддержка данного семейства свойств в современных браузерах довольно неплохая.

Свойство border-image-source задаёт путь к изображению рамки. По умолчанию картинкой заполнятся только углы рамки. В следующих заданиях мы разберём, как можно управлять отображением рамки.

В качестве изображения для рамки используем вот такую картинку:

*рис. border-img.png*

Синтаксис свойства такой же, как у background-image, то есть:

border-image-source: url("image.jpg");

Изображение рамки: border-image-slice

Давайте разберёмся, как работает механизм «нарезки» фонового изображения для рамки.

*рис. border-slice.jpg*

Каждая рамка имеет 9 областей: 4 угла, 4 стороны и центральную область. Для заполнения этих областей браузер должен нарезать картинку для рамки на 9 частей. Когда браузер не знает, как это сделать, он просто размещает картинку по углам — мы видели это в предыдущем задании.

Свойство border-image-slice задаёт отступы от краёв картинки до четырёх линий, которые «разрезают» её на части, как на схеме справа. Если эти отступы небольшие, то получается «нарезка» из 9 частей, которые затем размещаются в соответствующих областях рамки.

Но если отступы слишком большие (больше половины картинки), то браузер не может получить 9 частей и располагает то, что отрезалось по углам.

Значение свойства можно задавать числом без единицы измерения (оно обычно обозначает пиксели) или в процентах (относительно размера самой картинки). Пример:

border-image-slice: 60;
border-image-slice: 10%;
*/



/*Позиция фона от разных сторон
Интересная возможность background-position, о которой мы раньше не рассказывали — расположение фона можно задавать относительно любого угла блока, а не только от левого верхнего.

Чтобы указать от какой стороны отсчитывать расположение фона, нужно перед значением координат задать ключевые слова: top, right, bottom или left. Например:

/* по умолчанию координаты задаются для левого верхнего угла */
/*background-position: 10px 50px; /* слева 10px, сверху 50px */

/*background-position: right 30px bottom 60px; /* справа 30px, снизу 60px */
/*background-position: left 50px bottom 10px; /* слева 50px, снизу 10px */
/*  background-position: right 40px top 30px; /* справа 40px, сверху 30px */







/* Как отцентровать элемент
Чтобы отцентровать блочный элемент, нужно выполнить следующие действия:
Задать элементу ширину, которая меньше ширины родительского контейнера.
Задать для внешних отступов справа и слева значение auto.
Примеры кода:

selector {
    width: 100px;
    margin: 0 auto;
}

selector {
    width: 100px;
    margin-left: auto;
    margin-right: auto;
}
*/

/* псевдораспорка для плавающих блоков
.row::after {
content: "";
display:table;
clear:both;
}
*/

/*СТИЛИ ДЛЯ КНОПОК
input[type="text"],
input[type="password"] {
    width: 95%;
    height: 24px;
    margin-bottom: 10px;
    padding: 2px 5px;
    border: 1px solid #cccccc;
}

input[type="image"] {
    padding: 5px;
    vertical-align: top;
    border: 1px solid #cccccc;
}

input[type="submit"] {
    display: inline-block;
    margin: 0 5px;
    padding: 6px 15px;
    color: #ffffff;
    background: #2c3e50;
    border: none;
*/


/*JS - localStorage
<script>
            if (window.localStorage) {
                var elements = document.querySelectorAll('[name]');

                for (var i = 0, length = elements.length; i < length; i++) {
                    (function(element) {
                        var name = element.getAttribute('name');

                        element.value = localStorage.getItem(name) || '';

                        element.onkeyup = function() {
                            localStorage.setItem(name, element.value);
                        };
                    })(elements[i]);
                }
            }
 </script>
*/

/* transition
Универсальное свойство, которое позволяет одновременно задать значения transition-property, transition-duration, transition-timing-function и transition-delay. Устанавливает эффект перехода между двумя состояниями элемента, они могут быть определены с помощью псевдокласса :hover или :active, а также динамически через JavaScript.
 */


 /*
margin: o auto; - отцентровка
 */